import Head from 'next/head'
import { useEffect, useState } from 'react'
import { Label, Labels } from './_components/Labels'
import { octokit } from './utils/octokit'
import { LineChart, Line, XAxis, YAxis, Tooltip, Legend } from 'recharts'
import { DateTime } from 'luxon'

export default function Home() {
  const [currentLabel, setCurrentLabel] = useState<Label>()
  const [issueOpenAmount, setIssueOpenAmount] = useState(0)
  const [issueCloseAmount, setIssueCloseAmount] = useState(0)
  const [data, setData] = useState<
    { date: string; closedAmount: number; openAmount: number }[]
  >([])

  useEffect(() => {
    if (currentLabel?.name) {
      setIssueOpenAmount(0)
      setIssueCloseAmount(0)

      Promise.all([
        octokit.rest.issues.listForRepo({
          owner: 'vercel',
          repo: 'next.js',
          labels: currentLabel.name,
          state: 'open',
          per_page: 100,
          page: 1,
        }),
        octokit.rest.issues.listForRepo({
          owner: 'vercel',
          repo: 'next.js',
          labels: currentLabel.name,
          state: 'open',
          per_page: 100,
          page: 2,
        }),
        octokit.rest.issues.listForRepo({
          owner: 'vercel',
          repo: 'next.js',
          labels: currentLabel.name,
          state: 'closed',
          per_page: 100,
          page: 1,
        }),
        octokit.rest.issues.listForRepo({
          owner: 'vercel',
          repo: 'next.js',
          labels: currentLabel.name,
          state: 'closed',
          per_page: 100,
          page: 2,
        }),
      ]).then((res) => {
        const [openList1, openList2, closedList1, closedList2] = res

        const openListArray = [...openList1.data, ...openList2.data]
        const closedListArray = [...closedList1.data, ...closedList2.data]

        setIssueOpenAmount(openListArray.length)
        setIssueCloseAmount(closedListArray.length)

        const rawData: {
          date: string
          closedAmount: number
          openAmount: number
        }[] = new Array(60).fill(1).map((_, index) => {
          return {
            date: DateTime.now().minus({ days: index }).toISODate() || '',
            openAmount: 0,
            closedAmount: 0,
          }
        })

        openListArray.map((issue) => {
          const date = DateTime.fromISO(issue.created_at).toISODate()
          const result = rawData.find((item) => item.date === date)

          if (result) {
            result.openAmount++
          }
        })

        closedListArray.map((issue) => {
          const date = DateTime.fromISO(issue.created_at).toISODate()
          const result = rawData.find((item) => item.date === date)

          if (result) {
            result.closedAmount--
          }
        })

        setData(rawData)
      })
    }
  }, [currentLabel])

  useEffect(() => {}, [currentLabel])

  return (
    <>
      <Head>
        <title>Github Issue Check</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <Labels
          onSelect={(label) => {
            setCurrentLabel(label)
          }}
        />
        <h1>
          {currentLabel?.name} (+{issueOpenAmount}, -{issueCloseAmount})
        </h1>

        <LineChart width={1300} height={400} data={data}>
          <Line type='monotone' dataKey='closedAmount' stroke='gray' />
          <Line type='monotone' dataKey='openAmount' stroke='red' />
          <XAxis dataKey='date' />
          <YAxis />
          <Tooltip />
          <Legend />
        </LineChart>
      </main>
    </>
  )
}
